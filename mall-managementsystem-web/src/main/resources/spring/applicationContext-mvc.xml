<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.2.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd"
		>
	<!--mvc:annotation-driven注册了 RequestMappingHandlerMapping, a RequestMappingHandlerAdapter,and an ExceptionHandlerExceptionResolver
        能启动@RequestMapping,@ExceptionHandler, and others注释 -->
	<mvc:annotation-driven />

	<!-- ①：对web包中的Controller类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<!-- 也就是说这里相当于实例化了Controller类并且给它注入了Service的实例？它没有扫描Service的包诶。。 -->
	<!-- 因为applicationContext.xml先于本文件加载，所以那边先进行扫描，其实是注入了的，byName通过@Service(...)里面的值进行匹配 -->
	<context:component-scan base-package="com.jiangbo.mall.controllers" />

	<!-- 把无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />
	<!-- 配置静态资源，直接映射到对应的文件夹，不被DispatcherServlet处理而由前面的default-servlet-handler处理，3.04新增功能，需要重新设置spring-mvc-3.0.xsd -->
	<mvc:resources mapping="/img/**" location="/img/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/html/**" location="/html/" />

	<!--- StringHttpMessageConverter bean -->

	<!-- 下面这两个处理器映射默认跟<mvc:annotation-driven />功能几乎是一样的，都能够启用SpringMVC的注解功能，只是如果要添加一些其它功能的时候就进行配置了 -->
	<!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射，添加拦截器，类级别的处理器映射 -->
	<!--<bean
			class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<list>
				&lt;!&ndash; 用于检查session是否存在 &ndash;&gt;
				<bean class="com.lince.util.MyHandlerInterceptor" />
			</list>
		</property>
	</bean>-->

	<!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射，对有RequestMapping注解的控制器进行HTTP路径、HTTP方法和请求参数解析，
        这里 配置了一个基于注解的定制的WebBindingInitializer，解决日期转换问题，方法级别的处理器映射 -->
<!--	<bean
			class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="cacheSeconds" value="0" />
		&lt;!&ndash; cacheSeconds =0时，则将设置如下响应头数据：
        Pragma：no-cache     HTTP 1.0的不缓存响应头
        Expires：1L          useExpiresHeader=true时，HTTP 1.0
        Cache-Control ：no-cache  useCacheControlHeader=true时，HTTP 1.1
        Cache-Control ：no-store  useCacheControlNoStore=true时，该设置是防止Firefox缓存 &ndash;&gt;
		<property name="webBindingInitializer">
			<bean class="com.lince.util.MyWebBinding" />
		</property>
		&lt;!&ndash; 配置一下对json数据的转换 &ndash;&gt;
		<property name="messageConverters">
			<list>
				&lt;!&ndash; 对@ResponseBody注释的方法生效 &ndash;&gt;
				<bean
						class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
				<bean
						class="org.springframework.http.converter.StringHttpMessageConverter" />
			</list>
		</property>
	</bean>-->

	<!--配置拦截器-->
	<mvc:interceptors>
		<mvc:interceptor><!--配置局部拦截器，需要满足下列路径条件-->
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/index/main"/><!--注销-->
			<mvc:exclude-mapping path="/login/toLogin"/><!--在home中定义了无须登陆的方法请求，直接过滤拦截-->
			<bean class="com.jiangbo.mall.interceptor.LoginInterceptor"/><!--自定义拦截器注册-->
		</mvc:interceptor>
	</mvc:interceptors>

	<!--图片上传-->
	<!--但你是否想过这儿配置的id (multipartResolver) 没呢? 试试将id修改为其他的,如 myMultipartResolver, 这还会让上传文件正常工作吗? 本来id仅作为一个唯一的标识即可.但在这儿只能说 NO, 你必须保证id必须是multipartResolver,  其他的还有localeResolver, themeResolver等等.
(有时候因为这点小问题导致抓狂), 为什么要固定bean的id啊? 此是陷阱一.
原因是在Spring MVC的核心类DispatcherServlet中, 把这些bean的id固定了. 你必须保证bean的id相同, 才能正常工作-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"/>
		<!--1024byte*500即500KB, 1024byte*1024即1M-->
		<property name="maxUploadSize" value="1048576"/>
		<!-- 上传文件大小若小于此参数，则不会生成临时文件，很尴尬，故改为2048 -->
		<property name="maxInMemorySize" value="2048" />
	</bean>

	<!-- 配置对freemarker视图解析器 -->
	<bean id="freemarkerConfig"
		  class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/view/" />
		<property name="freemarkerSettings">
			<props>
				<!-- FreeMarker默认每隔5秒检查模板是否被更新，如果已经更新了，就会重新加载并分析模板。 但经常检查模板是否更新可能比较耗时。如果你的应用运行在生产模式下，而且你预期模板不会经常更新，
           则可以将更新的延迟时间延长至一个小时或者更久。 可以通过为freemarkerSettings属性设置template_update_delay达到这一目的 -->
				<!--<prop key="template_update_delay">3600</prop>-->
				<prop key="template_update_delay">0</prop><!--调试时用0-->
				<prop key="default_encoding">UTF-8</prop>
				<prop key="number_format">0.##########</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="template_exception_handler">ignore</prop>
			</props>
		</property>
	</bean>

	<!-- freemarker视图解析器 -->
	<bean id="viewResolver"
			  class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
			<property name="exposeRequestAttributes" value="true" />
			<property name="exposeSessionAttributes" value="true" />
			<property name="viewClass">
				<value>org.springframework.web.servlet.view.freemarker.FreeMarkerView
				</value>
			</property>
			<property name="cache">
				<!--<value>true</value>-->
				<value>false</value>
			</property>
			 <property name="allowSessionOverride" value="true" />
		<property name="suffix">
			<value>.ftl</value>
		</property>
		<property name="contentType">
			<value>text/html; charset=UTF-8</value>
		</property>
		<property name="order" value="0" />
	</bean>

	<!--<bean id="viewResolverJsp"
		  class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
		<property name="viewClass"
				  value="org.springframework.web.servlet.view.InternalResourceView" />
		<property name="order" value="1" />
	</bean>-->
	<!-- 配置对HTML文件的视图解析器 -->


	<!--<task:annotation-driven />-->

	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<!--<bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>-->
</beans>
